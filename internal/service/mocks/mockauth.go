// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	service "shop/internal/service"
	models "shop/models"

	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// CreateSeller mocks base method.
func (m *MockAuth) CreateSeller(arg0 *models.Seller) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeller", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeller indicates an expected call of CreateSeller.
func (mr *MockAuthMockRecorder) CreateSeller(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeller", reflect.TypeOf((*MockAuth)(nil).CreateSeller), arg0)
}

// DeleteToken mocks base method.
func (m *MockAuth) DeleteToken(claims *service.TokenClaims) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteToken", claims)
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockAuthMockRecorder) DeleteToken(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockAuth)(nil).DeleteToken), claims)
}

// ExpireToken mocks base method.
func (m *MockAuth) ExpireToken(claims *service.TokenClaims) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExpireToken", claims)
}

// ExpireToken indicates an expected call of ExpireToken.
func (mr *MockAuthMockRecorder) ExpireToken(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireToken", reflect.TypeOf((*MockAuth)(nil).ExpireToken), claims)
}

// GenerateJWT mocks base method.
func (m *MockAuth) GenerateJWT(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockAuthMockRecorder) GenerateJWT(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockAuth)(nil).GenerateJWT), login, password)
}

// GenerateRefreshJWT mocks base method.
func (m *MockAuth) GenerateRefreshJWT(seller models.Seller) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshJWT", seller)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshJWT indicates an expected call of GenerateRefreshJWT.
func (mr *MockAuthMockRecorder) GenerateRefreshJWT(seller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshJWT", reflect.TypeOf((*MockAuth)(nil).GenerateRefreshJWT), seller)
}

// ParseToken mocks base method.
func (m *MockAuth) ParseToken(tokenString, secret string) (*service.TokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", tokenString, secret)
	ret0, _ := ret[0].(*service.TokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthMockRecorder) ParseToken(tokenString, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuth)(nil).ParseToken), tokenString, secret)
}

// ValidateToken mocks base method.
func (m *MockAuth) ValidateToken(claims *service.TokenClaims, isRefresh bool) (models.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", claims, isRefresh)
	ret0, _ := ret[0].(models.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthMockRecorder) ValidateToken(claims, isRefresh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuth)(nil).ValidateToken), claims, isRefresh)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// DeleteToken mocks base method.
func (m *MockCache) DeleteToken(ctx context.Context, ID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteToken", ctx, ID)
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockCacheMockRecorder) DeleteToken(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockCache)(nil).DeleteToken), ctx, ID)
}

// ExpireToken mocks base method.
func (m *MockCache) ExpireToken(ctx context.Context, ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireToken", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpireToken indicates an expected call of ExpireToken.
func (mr *MockCacheMockRecorder) ExpireToken(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireToken", reflect.TypeOf((*MockCache)(nil).ExpireToken), ctx, ID)
}

// GetToken mocks base method.
func (m *MockCache) GetToken(ctx context.Context, ID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, ID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockCacheMockRecorder) GetToken(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockCache)(nil).GetToken), ctx, ID)
}

// SetToken mocks base method.
func (m *MockCache) SetToken(ctx context.Context, SID int, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToken", ctx, SID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetToken indicates an expected call of SetToken.
func (mr *MockCacheMockRecorder) SetToken(ctx, SID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockCache)(nil).SetToken), ctx, SID, token)
}
